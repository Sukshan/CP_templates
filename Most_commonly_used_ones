

#include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <fstream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <algorithm>
#include <numeric>
#include <deque>
#include <iomanip> 
#include <iterator>
#include "ext/pb_ds/assoc_container.hpp"
#include "ext/pb_ds/tree_policy.hpp"
using namespace std;
using namespace __gnu_pbds;
using namespace std::chrono;

#define GODSPEED_SPIDERMAN ios:: sync_with_stdio(0);cin.tie(0);cout.tie(0);cout<<fixed;cout<<setprecision(15);
#define OH_oh(t) int t; cin>>t;
#define ll long long
#define pb(i) push_back(i);
#define all(a)  a.begin(), a.end()
#define gall(a) a.begin(), a.end(), greater<int>()
#define mp(a, b)  make_pair(a, b)
#define pbk  pop_back()
#define container_print(a) for(auto &it: a){ cout<<it<<" "; }
#define container_print_both(a) for(auto &it: a){ cout<<it.first<<" "<<it.second<<endl; }
#define check(i) cout<<i<<endl;
#define concatenate(a, b) a.insert(a.end(), b.begin(), b.end());




//CONSTANTS
const ll mod=1e9+7;
const ll moD=998244353;
const ll inf_big=1e18;
const ll inf=1e9;
const ll INF=1e18;
long double pi=2* acos(0.0);



// ORDERED SET PBDS ( USE less<T> after null type for set and    less_equal<T> for multiset)
template<class T> 
using ordered_set = tree<T, null_type,less_equal<T>, rb_tree_tag, tree_order_statistics_node_update> ;
 
template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
// find_by_order(k)  returns iterator to kth element starting from 0;
// order_of_key(k) returns count of elements strictly smaller than k;

template<class T>
using min_heap = priority_queue<T,vector<T>,greater<T> >; 



// EUCLID GCD ALGORITHM
int gcd(int a, int b){
    if(b==0) return a;
    return gcd(b, a%b);
}


//sieve of eratosthenes FIRST MARK ALL THE EVEN AND THEN MARK MULTIPLES LESS THAN 1e9 OF ALL REMANING ODD NUMBERS 
//WITHOUT MARKING THEMSELVES
int tarr[1];
void sieve(){
    tarr[1]=1;
    for(ll i=2; i*2<=9999998; i++){
        tarr[i*2]=1;
    }
    for(ll i=3; i<=9999; i+=2){
        for(ll j=2; j*i<=9999999; j++){
            tarr[j*i]=1;
        }
    }
}


//nCr USING LITTLE FERMAT THEOREM
ll ncalr(ll x, ll y, ll m){
    if(x == y) return 1;
    if(y==0) return 1;
    ll n = fac[x];
    ll d = (fac[y]* fac[x-y]) %m;
    ll ans = (n * expo_mania(d, m-2, m) )%m;
    return ans;
}
ll npr(ll x, ll y, ll m){
    ll n= fac[x];
    ll d= fac[x-y];
    return (n/d)%m;
}   



// MODULAR EXPONENTIATION WITHOUT MOD AND WITH MOD(FOR LARGE NUMBERS)
ll expo_mania(ll y, ll x){
    if(x==0) return 1;
    if(x==1) return y;
    else if(!(x&1)) return expo_mania(y*y, x/2);
    else return expo_mania(y*y, x/2)*y;
}
ll expo_mania(ll y, ll x, ll m){
    if(x==0) return 1;
    if(x==1) return y;
    else if(!(x&1)) return expo_mania((y*y)%m, (x/2)%m, m)%m;
    else return expo_mania((y*y)%m, (x/2)%m, m)*y%m;
}



//helps answer static range queries
struct seg_tree{
    int n, nextpot; 
    vector<int> seg_t;
    seg_tree(int k){
        n=k; 
        nextpot= pow(2, ceil((double)log2(k)));
        seg_t.resize(2*nextpot+10);
    }
    void take_intput(int size){
        for(int i=nextpot, j=1; j<=size; j++, i++) cin>>seg_t[i];
    }
    void build(){
        for(int i=2*nextpot-1; i>1; i-=2){
            seg_t[i/2]= max(seg_t[i], seg_t[i-1]);
        }
    }
    void update(int position, int value){
        position+= nextpot-1;
        seg_t[position]=value;
        while(position!=1){
            seg_t[position/2]= max(seg_t[position], position&1? seg_t[position-1]: seg_t[position+1]);
            position/=2;
        }
    }
    void query(int query_l, int query_r, int cur_node, int cur_node_l, int cur_node_r, int &value){

        if(cur_node_l > query_r or cur_node_r < query_l ) return;

        if(cur_node_l>=query_l and cur_node_r<= query_r){
            value= max(value, seg_t[cur_node]);
            return;
        }
        else{
            int len= cur_node_r - cur_node_l +1;
            query(query_l, query_r, cur_node*2, cur_node_l, cur_node_l + len/2 -1, value);

            query(query_l, query_r, cur_node*2+1, cur_node_l+ len/2, cur_node_r, value);
        }
        return;
    }
}
